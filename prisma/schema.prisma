generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id                 String         @id @default(uuid())
  nomeDeUsuario      String         @unique
  senhaHash          String
  nome               String
  email              String         @unique
  foto               String?
  tipo               TipoUsuario
  cidade             String?
  estado             String?
  pais               String?
  bairro             String?
  cpf                String?
  dataCriacao        DateTime       @default(now())
  codigo             String?
  administrador      Administrador?
  verified           Boolean        @default(false)
  amigosDe           Amigo[]        @relation("AmigoUsuario")
  amigos             Amigo[]        @relation("UsuarioAmigo")
  atleta             Atleta?
  clube              Clube?
  comentarios        Comentario[]
  curtidas           Curtida[]
  escolinha          Escolinha?
  mensagensEnviadas  Mensagem[]     @relation("MensagensEnviadas")
  mensagensRecebidas Mensagem[]     @relation("MensagensRecebidas")
  postagens          Postagem[]
  professor          Professor?
  seguidores         Seguidor[]     @relation("Seguido")
  seguindo           Seguidor[]     @relation("Seguidor")
}

model Professor {
  id                 String             @id @default(uuid())
  codigo             String             @unique
  cref               String?
  areaFormacao       String
  escola             String?
  qualificacoes      String[]
  certificacoes      String[]
  fotoUrl            String?
  statusCref         StatusCref?
  nome               String
  usuarioId          String?             @unique
  usuario            Usuario?            @relation(fields: [usuarioId], references: [id])
  treinosProgramados TreinoProgramado[]
}

model Amigo {
  id        String   @id @default(uuid())
  usuarioId String
  amigoId   String
  local     String?
  seguindo  Boolean? @default(false)
  amigo     Usuario  @relation("AmigoUsuario", fields: [amigoId], references: [id])
  usuario   Usuario  @relation("UsuarioAmigo", fields: [usuarioId], references: [id])
}

model Mensagem {
  id       String   @id @default(uuid())
  deId     String
  paraId   String
  conteudo String
  criadaEm DateTime @default(now())
  lida     Boolean  @default(false)
  de       Usuario  @relation("MensagensEnviadas", fields: [deId], references: [id])
  para     Usuario  @relation("MensagensRecebidas", fields: [paraId], references: [id])
}

model Atleta {
  id                    String               @id @default(uuid())
  usuarioId             String?              @unique
  nome                  String?
  sobrenome             String?
  email                 String?
  senhaHash             String?
  idade                 Int
  cpf                   String?
  telefone1             String?
  telefone2             String?
  nacionalidade         String?
  naturalidade          String?
  posicao               String?
  altura                Decimal?
  peso                  Decimal?
  seloQualidade         String?
  foto                  String?
  categoria             Categoria[]
  consentimento         Boolean              @default(false)
  clubeId               String?
  escolinhaId           String?
  statusConexao         StatusConexao        @default(Pendente)
  dataCriacao           DateTime             @default(now())
  dataUltimaModificacao DateTime?
  clube                 Clube?               @relation(fields: [clubeId], references: [id])
  escolinha             Escolinha?           @relation(fields: [escolinhaId], references: [id])
  usuario               Usuario?              @relation(fields: [usuarioId], references: [id])
  membrosGrupo          MembroGrupo[]
  midias                Midia[]
  pontuacao             PontuacaoAtleta?
  postagens             Postagem[]
  Ranking               Ranking?
  solicitacoesVinculo   SolicitacaoVinculo[]
  submissoesDesafio     SubmissaoDesafio[]
  treinosAgendados      TreinoAgendado[]
  treinosLivres         TreinoLivre[]
  Video                 Video[]
}

model TreinoProgramado {
  id             String                      @id @default(uuid())
  codigo         String                      @unique
  nome           String
  descricao      String?
  nivel          Nivel
  dataAgendada   DateTime?
  professorId    String?
  createdAt      DateTime                    @default(now())
  treinoAgendado TreinoAgendado[]
  professor      Professor?                  @relation(fields: [professorId], references: [id])
  exercicios     TreinoProgramadoExercicio[]
}

model TreinoProgramadoExercicio {
  id                 String           @id @default(uuid())
  treinoProgramadoId String
  exercicioId        String
  ordem              Int
  repeticoes         String
  exercicio          Exercicio        @relation(fields: [exercicioId], references: [id])
  treinoProgramado   TreinoProgramado @relation(fields: [treinoProgramadoId], references: [id])
}

model Exercicio {
  id                         String                      @id @default(uuid())
  codigo                     String                      @unique
  nome                       String
  descricao                  String?
  nivel                      Nivel
  categorias                 Categoria[]
  videoDemonstrativoUrl      String?
  treinoProgramadoExercicios TreinoProgramadoExercicio[]
}

model DesafioOficial {
  id              String             @id @default(uuid())
  titulo          String
  descricao       String
  imagemUrl       String?
  nivel           Nivel
  pontos          Int
  prazoSubmissao  DateTime?
  categoria       Categoria[]
  createdAt       DateTime           @default(now())
  submissoes      SubmissaoDesafio[]
}

model Seguidor {
  id                String  @id @default(uuid())
  seguidoUsuarioId  String
  seguidorUsuarioId String
  seguidoUsuario    Usuario @relation("Seguido", fields: [seguidoUsuarioId], references: [id])
  seguidorUsuario   Usuario @relation("Seguidor", fields: [seguidorUsuarioId], references: [id])
}

model Postagem {
  id          String       @id @default(uuid())
  conteudo    String
  imagemUrl   String?
  videoUrl    String?
  tipoMidia   TipoMidia?
  dataCriacao DateTime     @default(now())
  usuarioId   String
  atletaId    String?
  clubeId     String?
  escolinhaId String?
  comentarios Comentario[]
  curtidas    Curtida[]
  compartilhamentos Int @default(0)
  atleta      Atleta?      @relation(fields: [atletaId], references: [id])
  clube       Clube?       @relation(fields: [clubeId], references: [id])
  escolinha   Escolinha?   @relation(fields: [escolinhaId], references: [id])
  usuario     Usuario      @relation(fields: [usuarioId], references: [id])
}

model Midia {
  id          String     @id @default(uuid())
  url         String
  tipo        TipoMidia
  dataCriacao DateTime   @default(now())
  dataEnvio   DateTime
  descricao   String
  titulo      String
  atletaId    String?
  escolinhaId String?
  clubeId     String?
  atleta      Atleta?    @relation(fields: [atletaId], references: [id])
  clube       Clube?     @relation(fields: [clubeId], references: [id])
  escolinha   Escolinha? @relation(fields: [escolinhaId], references: [id])
}

model Escolinha {
  id          String     @id @default(uuid())
  usuarioId   String?     @unique
  nome        String
  cnpj        String?
  telefone1   String?
  telefone2   String?
  email       String?
  siteOficial String?
  sede        String?
  logradouro  String?
  numero      String?
  complemento String?
  bairro      String?
  cidade      String?
  estado      String?
  pais        String?
  cep         String?
  logo        String?
  dataCriacao DateTime   @default(now())
  atletas     Atleta[]
  usuario     Usuario?    @relation(fields: [usuarioId], references: [id])
  midias      Midia[]
  postagens   Postagem[]
}

model Comentario {
  id          String   @id @default(uuid())
  conteudo    String
  dataCriacao DateTime @default(now())
  usuarioId   String
  postagemId  String
  postagem    Postagem @relation(fields: [postagemId], references: [id])
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
}

model Clube {
  id          String     @id @default(uuid())
  usuarioId   String?     @unique
  nome        String
  cnpj        String?
  telefone1   String?
  telefone2   String?
  email       String?
  siteOficial String?
  sede        String?
  estadio     String?
  logradouro  String?
  numero      String?
  complemento String?
  bairro      String?
  cidade      String?
  estado      String?
  pais        String?
  cep         String?
  logo        String?
  dataCriacao DateTime   @default(now())
  atletas     Atleta[]
  usuario     Usuario?    @relation(fields: [usuarioId], references: [id])
  midias      Midia[]
  postagens   Postagem[]
}

model SolicitacaoVinculo {
  id           String   @id @default(uuid())
  atletaId     String
  entidadeId   String
  tipoEntidade String
  status       String
  criadoEm     DateTime @default(now())
  atleta       Atleta   @relation(fields: [atletaId], references: [id])
}

model SubmissaoDesafio {
  id        String         @id @default(uuid())
  atletaId  String
  desafioId String
  videoUrl  String
  aprovado  Boolean?
  createdAt DateTime       @default(now())
  atleta    Atleta         @relation(fields: [atletaId], references: [id])
  desafio   DesafioOficial @relation(fields: [desafioId], references: [id])
}

model Grupo {
  id        String        @id @default(uuid())
  nome      String
  descricao String?
  membros   MembroGrupo[]
}

model MembroGrupo {
  id       String @id @default(uuid())
  grupoId  String
  atletaId String
  atleta   Atleta @relation(fields: [atletaId], references: [id])
  grupo    Grupo  @relation(fields: [grupoId], references: [id])
}

model Administrador {
  id        String  @id @default(uuid())
  usuarioId String  @unique
  cargo     String
  nivel     Nivel
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
}

model LogErro {
  id           String   @id @default(uuid())
  errorMessage String
  requestId    String
  timestamp    DateTime
  path         String
  clientIp     String
  userAgent    String
  referer      String?
}

model Curtida {
  id         String   @id @default(uuid())
  usuarioId  String
  postagemId String
  createdAt  DateTime @default(now())
  postagem   Postagem @relation(fields: [postagemId], references: [id])
  usuario    Usuario  @relation(fields: [usuarioId], references: [id])
}

model TreinoAgendado {
  id                 String            @id @default(uuid())
  titulo             String
  dataHora           DateTime
  local              String?
  atletaId           String
  treinoProgramadoId String?
  atleta             Atleta            @relation(fields: [atletaId], references: [id])
  treinoProgramado   TreinoProgramado? @relation(fields: [treinoProgramadoId], references: [id])
}

model TreinoLivre {
  id         String           @id @default(uuid())
  atletaId   String
  data       DateTime
  descricao  String?
  duracaoMin Int?
  registros  RegistroTreino[]
  atleta     Atleta           @relation(fields: [atletaId], references: [id])
}

model RegistroTreino {
  id         String      @id @default(uuid())
  treinoId   String
  notas      String?
  completado Boolean     @default(false)
  treino     TreinoLivre @relation(fields: [treinoId], references: [id])
}

model PontuacaoAtleta {
  atletaId                  String   @id
  pontuacaoTotal            Int      @default(0)
  pontuacaoPerformance      Int      @default(0)
  pontuacaoDisciplina       Int      @default(0)
  pontuacaoResponsabilidade Int      @default(0)
  ultimaAtualizacao         DateTime @default(now())
  atleta                    Atleta   @relation(fields: [atletaId], references: [id])
}

model Video {
  id        String      @id @default(uuid())
  titulo    String
  url       String
  thumbnail String?
  atletaId  String
  createdAt DateTime    @default(now())
  categoria Categoria[]
  nivel     Nivel
  atleta    Atleta      @relation(fields: [atletaId], references: [id])
}

model Ranking {
  id        String   @id @default(uuid())
  atletaId  String   @unique
  total     Int      @default(0)
  posicao   Int
  createdAt DateTime @default(now())
  atleta    Atleta   @relation(fields: [atletaId], references: [id])
}

model ConfiguracaoSistema {
  id                   String  @id @default(uuid())
  registrationEnabled  Boolean @default(true)
  maintenanceMode      Boolean @default(false)
  allowAthleteChallenges Boolean @default(true)
  allowProfileEditing  Boolean @default(true)
  maxDailyPosts        Int     @default(5)
}

enum Nivel {
  Base
  Avancado
  Performance
}

enum Categoria {
  Sub9
  Sub11
  Sub13
  Sub15
  Sub17
  Sub20
  Livre
}

enum TipoUsuario {
  Atleta
  Professor
  Clube
  Escolinha
  Admin
}

enum TipoMidia {
  Imagem
  Video
  Documento
}

enum StatusConexao {
  Pendente
  Aprovado
  Recusado
}

enum StatusCref {
  Ativo
  Desativo
  Pendente
}